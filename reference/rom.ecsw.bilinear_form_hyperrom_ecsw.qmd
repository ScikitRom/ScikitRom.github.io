# rom.ecsw.bilinear_form_hyperrom_ecsw { #skrom.rom.ecsw.bilinear_form_hyperrom_ecsw }

`rom.ecsw.bilinear_form_hyperrom_ecsw`

ECSW-based hyperreduction for finite element bilinear forms with element clustering.

This module provides hyperreduction of bilinear forms using Energy-Conserving 
Sampling and Weighting (ECSW) combined with intelligent element clustering for 
efficient reduced-order stiffness assembly. It achieves dramatic computational 
speedups by:
- Clustering elements by number of free DOFs for vectorized operations
- Extracting and projecting element stiffness blocks onto reduced bases and weighing them
- Assembling global reduced matrices via vectorized Einstein summation

**TL;DR**: Enables substantial speedup in bilinear form assembly for ROMs while 
preserving stability and energy conservation through intelligent element clustering
and weighted assembly strategies.

Author: Suparno Bhattacharyya

## Classes

| Name | Description |
| --- | --- |
| [BilinearFormHYPERROM_ecsw](#skrom.rom.ecsw.bilinear_form_hyperrom_ecsw.BilinearFormHYPERROM_ecsw) | ECSW-based hyperreduced bilinear form with element clustering for efficient assembly. |

### BilinearFormHYPERROM_ecsw { #skrom.rom.ecsw.bilinear_form_hyperrom_ecsw.BilinearFormHYPERROM_ecsw }

```python
rom.ecsw.bilinear_form_hyperrom_ecsw.BilinearFormHYPERROM_ecsw(
    form,
    elem_weight,
    ubasis,
    lob,
    rob,
    vbasis=None,
    free_dofs=None,
    mean=None,
    nthreads=0,
    dtype=np.float64,
)
```

ECSW-based hyperreduced bilinear form with element clustering for efficient assembly.

**TL;DR**: Dramatically accelerates bilinear form assembly by ~1000x through 
energy-conserving element clustering and weighted sampling, providing both 
computational efficiency and numerical stability for real-time ROM applications.

This class implements a sophisticated hyperreduction strategy that combines 
Energy-Conserving Sampling and Weighting (ECSW) with intelligent element 
clustering to achieve massive computational savings while preserving crucial 
physical properties. The approach works through several key innovations:

This hyperreduction is particularly effective for problems where:
- Energy conservation is critical (structural dynamics, wave propagation)

- Element distributions are relatively uniform (similar local DOF counts)

- Computational stability is paramount for long-time integration

- Real-time performance is required for control or optimization

#### Parameters {.doc-section .doc-section-parameters}

| Name        | Type                                        | Description                                                                                                                                                                                            | Default      |
|-------------|---------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------|
| form        | callable                                    | The original bilinear form function to be hyperreduced. Should accept  test and trial basis functions and return element-wise stiffness contributions.                                                 | _required_   |
| elem_weight | scalar or array_like of shape (n_elements,) | Element-wise ECSW weights determining the contribution of each element  to the reduced assembly. Can be a single scalar applied to all elements  or individual weights per element from ECSW analysis. | _required_   |
| ubasis      | Basis                                       | Trial-space finite element basis containing full DOF count, element  connectivity, and quadrature information for the original mesh.                                                                   | _required_   |
| lob         | ndarray of shape (n_free, r) or (n_full, r) | Left (test) reduced basis matrix. Shape depends on whether free_dofs  is provided - if so, basis is defined only on free DOFs.                                                                         | _required_   |
| rob         | ndarray of shape (n_free, r) or (n_full, r) | Right (trial) reduced basis matrix with same shape requirements as lob. Projects full-order solutions to the r-dimensional reduced space.                                                              | _required_   |
| vbasis      | Basis                                       | Test-space finite element basis. If None, defaults to ubasis for  standard Galerkin formulations.                                                                                                      | `None`       |
| free_dofs   | ndarray of int                              | Indices of global DOFs that are free (non-Dirichlet). If provided, all reduced bases and operations are performed only on these DOFs.                                                                  | `None`       |
| mean        | ndarray                                     | Mean snapshot vector for solution centering. Required if snapshot data  was mean-subtracted during reduced basis construction.                                                                         | `None`       |
| nthreads    | int                                         | Number of threads for parallel element matrix extraction. Zero means  serial execution, positive values enable multi-threaded assembly.                                                                | `0`          |
| dtype       | numpy.dtype                                 | Numerical precision for all computations and storage arrays.                                                                                                                                           | `np.float64` |

#### Attributes {.doc-section .doc-section-attributes}

| Name                      | Type            | Description                                                                                                                        |
|---------------------------|-----------------|------------------------------------------------------------------------------------------------------------------------------------|
| lob, rob                  | ndarray         | Left and right reduced basis matrices, possibly restricted to free DOFs.                                                           |
| free_dofs                 | ndarray or None | Indices of free DOFs if Dirichlet boundary conditions are present.                                                                 |
| mean                      | ndarray or None | Mean snapshot vector for solution centering and reconstruction.                                                                    |
| r                         | int             | Reduced dimension (number of reduced basis vectors).                                                                               |
| mapping                   | ndarray of int  | Mapping from full DOF indices to reduced free-DOF indices, with  Dirichlet DOFs mapped to -1.                                      |
| cluster_idx               | list of ndarray | Element indices grouped by number of free DOFs per element. Each entry  contains indices of elements with the same free DOF count. |
| order_cluster             | list of ndarray | Local DOF ordering within each cluster for efficient submatrix extraction. Shape: (cluster_size, n_free_dofs_in_cluster).          |
| w_cluster                 | list of ndarray | ECSW weights corresponding to elements in each cluster.                                                                            |
| R_test_free, R_trial_free | list of ndarray | Test and trial basis matrices restricted to free DOFs for each cluster. Shape: (cluster_size, n_free_dofs, r).                     |
| unique_freedom            | ndarray of int  | Unique counts of free DOFs per element, determining the number of clusters.                                                        |

#### Methods

| Name | Description |
| --- | --- |
| [assemble_weighted_ecsw](#skrom.rom.ecsw.bilinear_form_hyperrom_ecsw.BilinearFormHYPERROM_ecsw.assemble_weighted_ecsw) | Assemble the globally weighted reduced stiffness matrix using ECSW. |
| [extract_element_matrices_rom](#skrom.rom.ecsw.bilinear_form_hyperrom_ecsw.BilinearFormHYPERROM_ecsw.extract_element_matrices_rom) | Extract element stiffness matrices for hyperreduced mesh assembly. |

##### assemble_weighted_ecsw { #skrom.rom.ecsw.bilinear_form_hyperrom_ecsw.BilinearFormHYPERROM_ecsw.assemble_weighted_ecsw }

```python
rom.ecsw.bilinear_form_hyperrom_ecsw.BilinearFormHYPERROM_ecsw.assemble_weighted_ecsw(
    **kwargs,
)
```

Assemble the globally weighted reduced stiffness matrix using ECSW.

**TL;DR**: Main assembly method that orchestrates element clustering, 
vectorized stiffness extraction, ECSW weighting, and reduced basis 
projection to produce the final r√ór reduced-order stiffness matrix.

This method performs the complete ECSW hyperreduction assembly process 
through a sophisticated multi-stage algorithm:

1. **Element Matrix Extraction**: Calls element extraction routines to 
   compute local stiffness matrices for all active elements, leveraging 
   parallel processing when available.

2. **Cluster-Based Processing**: Processes elements in clusters based on 
   their free DOF count, enabling highly efficient vectorized operations 
   and eliminating expensive Python loops.

3. **Submatrix Extraction**: For each cluster, extracts the free DOF 
   submatrices from local element matrices using advanced NumPy indexing 
   for maximum efficiency.

4. **ECSW Weighting**: Applies energy-conserving weights to preserve 
   physical properties while enabling computational reduction.

5. **Vectorized Contraction**: Uses Einstein summation to perform 
   parallel contractions over entire clusters: 
   A_reduced += Œ£_e R_test[e]^T @ (w[e] * K_local[e]) @ R_trial[e]

The final result preserves the mathematical structure of the full-order 
operator while achieving dramatic computational savings through intelligent 
clustering and vectorization strategies.

###### Parameters {.doc-section .doc-section-parameters}

| Name     | Type   | Description                                                                                                                                                | Default   |
|----------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
| **kwargs | dict   | Additional keyword arguments passed to element extraction routines for controlling assembly behavior, such as material parameters or  quadrature settings. | `{}`      |

###### Returns {.doc-section .doc-section-returns}

| Name      | Type                    | Description                                                                                                                                                                                      |
|-----------|-------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| K_reduced | ndarray of shape (r, r) | Assembled reduced-order stiffness matrix ready for use in ROM systems. This matrix preserves the energy conservation properties of the  full-order operator while enabling real-time evaluation. |

##### extract_element_matrices_rom { #skrom.rom.ecsw.bilinear_form_hyperrom_ecsw.BilinearFormHYPERROM_ecsw.extract_element_matrices_rom }

```python
rom.ecsw.bilinear_form_hyperrom_ecsw.BilinearFormHYPERROM_ecsw.extract_element_matrices_rom(
    ubasis,
    vbasis=None,
    elem_indices=None,
    **kwargs,
)
```

Extract element stiffness matrices for hyperreduced mesh assembly.

**TL;DR**: Computes local element stiffness matrices for the reduced 
element set using either serial or parallel execution, providing the 
fundamental building blocks for ECSW-weighted global assembly.

This method performs the core finite element integration to compute 
element-level contributions to the global bilinear form. The integration 
is performed only over elements selected by the hyperreduction strategy, 
dramatically reducing computational cost while maintaining accuracy through 
ECSW weighting.

The method supports both execution modes:
- **Serial Mode** (nthreads=0): Sequential element-by-element computation
- **Parallel Mode** (nthreads>0): Multi-threaded parallel element processing

For each element, the method evaluates the bilinear form:
K_e[i,j] = ‚à´_Œ©_e œÜ_i(x) * form * œÜ_j(x) dx

where œÜ_i, œÜ_j are basis functions and integration uses the quadrature 
rules embedded in the finite element basis.

###### Parameters {.doc-section .doc-section-parameters}

| Name         | Type              | Description                                                                                                                      | Default    |
|--------------|-------------------|----------------------------------------------------------------------------------------------------------------------------------|------------|
| ubasis       | Basis             | Trial-space finite element basis containing mesh connectivity, quadrature points, and basis function evaluations.                | _required_ |
| vbasis       | Basis             | Test-space finite element basis. If None, defaults to ubasis  for standard Galerkin formulations.                                | `None`     |
| elem_indices | array_like of int | Specific element indices to include in extraction. If None, processes all elements in the hyperreduced mesh.                     | `None`     |
| **kwargs     | dict              | Additional keyword arguments passed to the bilinear form evaluation, such as material parameters or other problem-specific data. | `{}`       |

###### Returns {.doc-section .doc-section-returns}

| Name             | Type                                                      | Description                                                                                                                                   |
|------------------|-----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|
| element_matrices | ndarray of shape (n_elements, n_local_dofs, n_local_dofs) | Array of local element stiffness matrices. Each element_matrices[e]  contains the n_local_dofs √ó n_local_dofs stiffness matrix for element e. |

###### Raises {.doc-section .doc-section-raises}

| Name   | Type       | Description                                                                                                    |
|--------|------------|----------------------------------------------------------------------------------------------------------------|
|        | ValueError | If trial and test bases have incompatible quadrature point counts, indicating a mismatch in integration rules. |