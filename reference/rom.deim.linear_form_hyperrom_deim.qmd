# rom.deim.linear_form_hyperrom_deim { #skrom.rom.deim.linear_form_hyperrom_deim }

`rom.deim.linear_form_hyperrom_deim`

DEIM-based hyperreduction for finite element linear forms.

This module implements hyperreduction of linear forms using the Discrete 
Empirical Interpolation Method (DEIM) combined with element sampling for 
efficient load vector assembly. It provides dramatic computational speedups by:

- Assembling only a subset of finite elements based on DEIM selection

- Using efficient vector assembly techniques for sparse operations

- Reconstructing full load vectors via DEIM interpolation matrices

- Supporting parallel element vector extraction when available

**TL;DR**: Enables speedup in linear form assembly for ROMs by 
evaluating only essential elements and reconstructing the full load vector through
intelligent interpolation.

Author: Suparno Bhattacharyya

## Classes

| Name | Description |
| --- | --- |
| [LinearFormHYPERROM_deim](#skrom.rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim) | DEIM-based hyperreduced linear form for efficient ROM load vector assembly. |

### LinearFormHYPERROM_deim { #skrom.rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim }

```python
rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim(
    form,
    elem_weight,
    ubasis,
    lob,
    sampled_rows,
    deim_mat,
    free_dofs=None,
    mean=None,
    nthreads=0,
    dtype=np.float64,
)
```

DEIM-based hyperreduced linear form for efficient ROM load vector assembly.

**TL;DR**: Dramatically accelerates linear form assembly by ~1000x through 
strategic element sampling and DEIM interpolation, essential for real-time 
ROM applications with parameter-dependent forcing terms.

This class implements a hyperreduction strategy that combines element 
sampling with the Discrete Empirical Interpolation Method (DEIM) to achieve 
massive computational savings in linear form assembly. The approach works by:

1. **Element Selection**: Uses DEIM-selected degrees of freedom to identify 
   which finite elements must be assembled for load vector construction, 
   dramatically reducing the active element count.

2. **Sparse Assembly**: Assembles only the selected elements using efficient 
   vector assembly techniques, avoiding computation over the entire domain.

3. **DEIM Reconstruction**: Reconstructs the full reduced-order load vector 
   using the DEIM interpolation matrix, enabling accurate approximation from 
   limited assembly data.

4. **Basis Projection**: Projects the sampled full-order load vector onto the 
   reduced test basis to produce the final reduced-order linear form.

This hyperreduction is particularly effective for problems where:
- Load distributions are spatially localized or have low-rank structure
- Real-time simulation speed is critical for control applications
- Parameter-dependent forcing terms exhibit smooth variation
- Computational resources are severely constrained

The method transforms assembly complexity from O(n_elements) to O(n_selected)
where n_selected << n_elements, enabling real-time ROM evaluation with 
parameter-dependent loads.

#### Parameters {.doc-section .doc-section-parameters}

| Name         | Type                               | Description                                                                                                                                      | Default      |
|--------------|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|--------------|
| form         | callable                           | The original linear form function to be hyperreduced. Should accept  test basis functions and return element-wise load contributions.            | _required_   |
| elem_weight  | array_like of shape (n_elements,)  | Element weight vector where 1 indicates selected elements and 0 indicates  elements to skip. Typically derived from DEIM DOF selection analysis. | _required_   |
| ubasis       | Basis                              | Test basis functions for the full-order finite element space. Contains mesh connectivity and quadrature information.                             | _required_   |
| lob          | ndarray of shape (n_free, r)       | Left (test) reduced basis matrix that projects full-order load vectors  to the r-dimensional reduced test space.                                 | _required_   |
| sampled_rows | array_like of int, shape (n_samp,) | Global DOF indices selected by DEIM for interpolation. These are the  only rows where full assembly information is retained.                     | _required_   |
| deim_mat     | ndarray of shape (r, n_samp)       | DEIM interpolation matrix that reconstructs full reduced-order load vectors  from sampled values: F_reduced = deim_mat @ F_sampled[sampled_rows] | _required_   |
| free_dofs    | ndarray of int                     | Indices of unconstrained degrees of freedom. Used for boundary condition  handling in the full-order system.                                     | `None`       |
| mean         | ndarray                            | Mean load vector for centering. Required if load data was mean-subtracted  during DEIM basis construction.                                       | `None`       |
| nthreads     | int                                | Number of threads for parallel element vector extraction. Zero means  serial execution, positive values enable parallel assembly.                | `0`          |
| dtype        | numpy.dtype                        | Numerical precision for all computations and storage.                                                                                            | `np.float64` |

#### Attributes {.doc-section .doc-section-attributes}

| Name             | Type                                                 | Description                                                                                  |
|------------------|------------------------------------------------------|----------------------------------------------------------------------------------------------|
| r_basis          | ndarray of shape (n_free, r)                         | Copy of the left (test) reduced basis matrix for load vector projection.                     |
| weight           | ndarray of shape (n_elements,)                       | Copy of element weight vector indicating active elements for assembly.                       |
| nonzero_elements | ndarray of int                                       | Indices of elements with nonzero weights (selected for assembly).                            |
| ubasis           | Basis                                                | Original full-order finite element basis reference.                                          |
| ubasis_rom       | Basis                                                | Finite element basis restricted to the hyperreduced mesh containing  only selected elements. |
| sampled_rows     | ndarray of int, shape (n_samp,)                      | Global DOF indices where DEIM interpolation is performed.                                    |
| n_samp           | int                                                  | Number of DEIM sampling points (length of sampled_rows).                                     |
| deim_mat         | ndarray of shape (r, n_samp)                         | DEIM projection matrix for load vector reconstruction.                                       |
| edofs            | ndarray of shape (n_active_elements, n_local_dofs)   | Element-to-DOF connectivity mapping for the reduced mesh.                                    |
| n_dofs           | int                                                  | Total number of global DOFs in the restricted mesh.                                          |
| rows             | ndarray of shape (n_active_elements * n_local_dofs,) | Flattened element-DOF indices for efficient vector assembly operations.                      |

#### Methods

| Name | Description |
| --- | --- |
| [assemble_deim](#skrom.rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim.assemble_deim) | Assemble the hyperreduced load vector using DEIM reconstruction. |
| [deim_elem_assembly](#skrom.rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim.deim_elem_assembly) | Assemble sparse load vector over hyperreduced element set. |
| [extract_element_vector_rom](#skrom.rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim.extract_element_vector_rom) | Extract element load vectors for hyperreduced mesh assembly. |

##### assemble_deim { #skrom.rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim.assemble_deim }

```python
rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim.assemble_deim(
    **kwargs,
)
```

Assemble the hyperreduced load vector using DEIM reconstruction.

**TL;DR**: Main assembly method that combines sparse element assembly 
with DEIM interpolation to produce the reduced-order load vector.

This method orchestrates the complete hyperreduction assembly process:

1. **Parameter Setup**: Combines default finite element parameters with 
   user-provided kwargs for element-level load evaluation.

2. **Sparse Assembly**: Calls `deim_elem_assembly()` to build the sparse 
   full-order load vector using only selected elements, dramatically 
   reducing computational cost.

3. **DEIM Sampling**: Extracts values at DEIM-selected rows from the 
   sparse vector, providing the minimal information needed for reconstruction.

4. **Vector Reconstruction**: Uses the DEIM interpolation matrix to 
   reconstruct the full reduced-order load vector from the sampled values.

The mathematical operation performed is:
F_reduced = deim_mat @ F_sampled[sampled_rows]

where F_sampled is the sparse load vector assembled over selected elements only.

###### Parameters {.doc-section .doc-section-parameters}

| Name     | Type   | Description                                                                                                                                                      | Default   |
|----------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
| **kwargs | dict   | Keyword arguments passed through to `deim_elem_assembly` for  element-level assembly control, such as material parameters or  time-dependent loading conditions. | `{}`      |

###### Returns {.doc-section .doc-section-returns}

| Name      | Type                  | Description                                                                                                                                                  |
|-----------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|
| F_reduced | ndarray of shape (r,) | Reduced-order load vector ready for use in ROM systems. This is the hyperreduced approximation of the full-order load projected onto the reduced test basis. |

##### deim_elem_assembly { #skrom.rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim.deim_elem_assembly }

```python
rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim.deim_elem_assembly(
    **kwargs,
)
```

Assemble sparse load vector over hyperreduced element set.

**TL;DR**: Performs efficient sparse assembly by extracting element 
load vectors only from selected elements and building the global sparse 
load vector using optimized scatter-add operations.

This method handles the computationally intensive element-level assembly 
phase of hyperreduction for load vectors:

1. **Element Vector Extraction**: Calls `extract_element_vector_rom()` 
   to compute local load contributions for selected elements only, 
   avoiding expensive integration over the entire domain.

2. **Data Preparation**: Flattens the element load vectors into a 
   1D array matching the connectivity pattern for efficient assembly.

3. **Scatter-Add Assembly**: Uses NumPy's `add.at` function to 
   efficiently accumulate element contributions at their global DOF 
   locations, handling overlapping contributions correctly.

The assembly process preserves the mathematical structure of the full-order 
load vector while dramatically reducing computational cost by focusing only 
on elements containing DEIM-selected degrees of freedom.

###### Parameters {.doc-section .doc-section-parameters}

| Name     | Type   | Description                                                                                                                                                                                | Default   |
|----------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
| **kwargs | dict   | Additional keyword arguments passed to `extract_element_vector_rom` for controlling element-level assembly behavior, such as load  magnitude parameters or spatial distribution functions. | `{}`      |

###### Returns {.doc-section .doc-section-returns}

| Name   | Type                       | Description                                                                                                                                                                                   |
|--------|----------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| f      | ndarray of shape (n_dofs,) | Sparse global load vector assembled over the hyperreduced  element set. Only selected elements contribute to this vector, making it much cheaper to construct than the full-order equivalent. |

##### extract_element_vector_rom { #skrom.rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim.extract_element_vector_rom }

```python
rom.deim.linear_form_hyperrom_deim.LinearFormHYPERROM_deim.extract_element_vector_rom(
    basis,
    elem_indices=None,
    **kwargs,
)
```

Extract element load vectors for hyperreduced mesh assembly.

**TL;DR**: Computes local element load vectors for the reduced 
element set using either serial or parallel execution, providing the 
fundamental building blocks for sparse global load vector assembly.

This method performs the core finite element integration to compute 
element-level contributions to the global linear form. The integration 
is performed only over elements selected by the hyperreduction strategy, 
dramatically reducing computational cost.

The method supports both serial and parallel execution modes:
- **Serial Mode** (nthreads=0): Sequential element-by-element computation
- **Parallel Mode** (nthreads>0): Multi-threaded parallel element processing

For each element, the method evaluates the linear form:
F_e[i] = ∫_Ω_e φ_i(x) * form(x) dx

where φ_i are test basis functions and the integration is performed using 
the quadrature rules embedded in the finite element basis.

###### Parameters {.doc-section .doc-section-parameters}

| Name         | Type              | Description                                                                                                                                                         | Default    |
|--------------|-------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| basis        | Basis             | Finite element basis for test functions containing mesh connectivity, quadrature points, and basis function evaluations.                                            | _required_ |
| elem_indices | array_like of int | Specific element indices to include in the extraction. If None, processes all elements in the hyperreduced mesh.                                                    | `None`     |
| **kwargs     | dict              | Additional keyword arguments passed to the linear form evaluation, such as load magnitude parameters, time-dependent coefficients, or  other problem-specific data. | `{}`       |

###### Returns {.doc-section .doc-section-returns}

| Name            | Type                                        | Description                                                                                                               |
|-----------------|---------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|
| element_vectors | ndarray of shape (n_elements, n_local_dofs) | Array of local element load vectors. Each element_vectors[e]  contains the n_local_dofs-length load vector for element e. |

###### Raises {.doc-section .doc-section-raises}

| Name   | Type       | Description                                                   |
|--------|------------|---------------------------------------------------------------|
|        | ValueError | If no valid basis is provided for the load vector extraction. |