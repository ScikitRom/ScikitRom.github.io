# rom.deim.bilinear_form_hyperrom_deim { #skrom.rom.deim.bilinear_form_hyperrom_deim }

`rom.deim.bilinear_form_hyperrom_deim`

DEIM-based hyperreduction for finite element bilinear forms.

This module implements hyperreduction of bilinear forms using the Discrete 
Empirical Interpolation Method (DEIM) combined with element sampling. It provides
dramatic computational speedups by:
- Assembling only a subset of finite elements based on DEIM selection
- Using sparse matrix techniques for efficient memory usage
- Reconstructing full operators via DEIM interpolation matrices
- Supporting parallel element matrix extraction when available

**TL;DR**: Enables ~100-1000x speedup in bilinear form assembly for ROMs by 
evaluating only essential elements and reconstructing the full operator through
intelligent interpolation.

Author: Suparno Bhattacharyya

## Classes

| Name | Description |
| --- | --- |
| [BilinearFormHYPERROM_deim](#skrom.rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim) | DEIM-based hyperreduced bilinear form for efficient ROM assembly. |

### BilinearFormHYPERROM_deim { #skrom.rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim }

```python
rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim(
    form,
    elem_weight,
    ubasis,
    lob,
    rob,
    sampled_rows,
    deim_mat,
    vbasis=None,
    free_dofs=None,
    mean=None,
    nthreads=0,
    dtype=np.float64,
)
```

DEIM-based hyperreduced bilinear form for efficient ROM assembly.

**TL;DR**: Dramatically accelerates bilinear form assembly by ~1000x through 
strategic element sampling and DEIM interpolation, essential for real-time 
nonlinear ROM applications.

This class implements a hyperreduction strategy that combines element 
sampling with the Discrete Empirical Interpolation Method (DEIM) to achieve 
massive computational savings in bilinear form assembly. The approach works by:

1. **Element Selection**: Uses DEIM-selected degrees of freedom to identify 
   which finite elements must be assembled, dramatically reducing the active 
   element count from thousands to tens.

2. **Sparse Assembly**: Assembles only the selected elements using efficient 
   sparse matrix techniques, avoiding computation over the entire domain.

3. **DEIM Reconstruction**: Reconstructs the full reduced-order operator using 
   the DEIM interpolation matrix, enabling accurate approximation from 
   limited assembly data.

4. **Basis Projection**: Projects the sampled full-order matrix onto the 
   reduced basis to produce the final reduced-order bilinear form.

This hyperreduction is particularly effective for problems where:
- Nonlinear effects are spatially localized
- Real-time simulation speed is critical
- The parameter-dependent operators have low-rank structure
- Computational resources are severely constrained

The method transforms assembly complexity from O(n_elements) to O(n_selected)
where n_selected << n_elements, enabling real-time nonlinear ROM evaluation.

#### Parameters {.doc-section .doc-section-parameters}

| Name         | Type                               | Description                                                                                                                                         | Default      |
|--------------|------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|--------------|
| form         | callable                           | The original bilinear form function to be hyperreduced. Should accept  basis functions and return element-wise contributions.                       | _required_   |
| elem_weight  | array_like of shape (n_elements,)  | Element weight vector where 1 indicates selected elements and 0 indicates  elements to skip. Typically derived from DEIM DOF selection.             | _required_   |
| ubasis       | Basis                              | Trial/test basis functions for the full-order finite element space. Contains mesh connectivity and quadrature information.                          | _required_   |
| lob          | ndarray of shape (n_free, r)       | Left (test) reduced basis matrix. Currently unused in this implementation but maintained for interface compatibility.                               | _required_   |
| rob          | ndarray of shape (n_free, r)       | Right (trial) reduced basis matrix that projects full-order solutions  to the r-dimensional reduced space.                                          | _required_   |
| sampled_rows | array_like of int, shape (n_samp,) | Global DOF indices selected by DEIM for interpolation. These are the  only rows where full assembly information is retained.                        | _required_   |
| deim_mat     | ndarray of shape (r, n_samp)       | DEIM interpolation matrix that reconstructs full reduced-order operators  from sampled values: A_reduced = deim_mat @ A_sampled[sampled_rows] @ rob | _required_   |
| vbasis       | Basis                              | Test function basis. If None, defaults to ubasis for Galerkin methods.                                                                              | `None`       |
| free_dofs    | ndarray of int                     | Indices of unconstrained degrees of freedom. Used for boundary condition  handling in the full-order system.                                        | `None`       |
| mean         | ndarray                            | Mean solution snapshot for centering. Required if snapshot data was  mean-subtracted during basis construction.                                     | `None`       |
| nthreads     | int                                | Number of threads for parallel element matrix extraction. Zero means  serial execution, positive values enable parallel assembly.                   | `0`          |
| dtype        | numpy.dtype                        | Numerical precision for all computations and storage.                                                                                               | `np.float64` |

#### Attributes {.doc-section .doc-section-attributes}

| Name               | Type                                               | Description                                                                                  |
|--------------------|----------------------------------------------------|----------------------------------------------------------------------------------------------|
| weight             | ndarray of shape (n_elements,)                     | Copy of element weight vector indicating active elements.                                    |
| nonzero_elements   | ndarray of int                                     | Indices of elements with nonzero weights (selected for assembly).                            |
| ubasis_rom         | Basis                                              | Finite element basis restricted to the hyperreduced mesh containing  only selected elements. |
| sampled_rows       | ndarray of int, shape (n_samp,)                    | Global DOF indices where DEIM interpolation is performed.                                    |
| n_samp             | int                                                | Number of DEIM sampling points (length of sampled_rows).                                     |
| deim_mat           | ndarray of shape (r, n_samp)                       | DEIM projection matrix for operator reconstruction.                                          |
| edofs              | ndarray of shape (n_active_elements, n_local_dofs) | Element-to-DOF connectivity mapping for the reduced mesh.                                    |
| n_elems            | int                                                | Number of active elements in the hyperreduced mesh.                                          |
| n_loc              | int                                                | Number of local degrees of freedom per element.                                              |
| n_dofs             | int                                                | Total number of global DOFs in the restricted mesh.                                          |
| rows, cols         | ndarray                                            | Broadcasted row and column indices for sparse matrix assembly.                               |
| row_flat, col_flat | ndarray                                            | Flattened index arrays for efficient COO matrix construction.                                |

#### Methods

| Name | Description |
| --- | --- |
| [assemble_deim](#skrom.rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim.assemble_deim) | Assemble the hyperreduced bilinear form using DEIM reconstruction. |
| [deim_elem_assembly](#skrom.rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim.deim_elem_assembly) | Assemble sparse matrix over hyperreduced element set. |
| [extract_element_matrices_rom](#skrom.rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim.extract_element_matrices_rom) | Extract element matrices for hyperreduced mesh assembly. |

##### assemble_deim { #skrom.rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim.assemble_deim }

```python
rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim.assemble_deim(
    **kwargs,
)
```

Assemble the hyperreduced bilinear form using DEIM reconstruction.

**TL;DR**: Main assembly method that combines sparse element assembly 
with DEIM interpolation to produce the reduced-order operator matrix.

This method orchestrates the complete hyperreduction assembly process:

1. **Sparse Assembly**: Calls `deim_elem_assembly()` to build the sparse 
   full-order matrix using only selected elements, dramatically reducing 
   computational cost.

2. **DEIM Sampling**: Extracts values at DEIM-selected rows from the 
   sparse matrix, providing the minimal information needed for reconstruction.

3. **Operator Reconstruction**: Uses the DEIM interpolation matrix to 
   reconstruct the full reduced-order operator from the sampled values.

4. **Basis Projection**: Projects the reconstructed operator onto the 
   reduced trial basis to produce the final r×r reduced-order matrix.

The mathematical operation performed is:
A_reduced = deim_mat @ A_sampled[sampled_rows, :] @ rob

where A_sampled is the sparse matrix assembled over selected elements only.

###### Parameters {.doc-section .doc-section-parameters}

| Name     | Type   | Description                                                                                   | Default   |
|----------|--------|-----------------------------------------------------------------------------------------------|-----------|
| **kwargs | dict   | Keyword arguments passed through to `deim_elem_assembly` for  element-level assembly control. | `{}`      |

###### Returns {.doc-section .doc-section-returns}

| Name      | Type                    | Description                                                                                                                                                          |
|-----------|-------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| A_reduced | ndarray of shape (r, r) | Reduced-order bilinear form matrix ready for use in ROM systems. This is the hyperreduced approximation of the full-order operator projected onto the reduced basis. |

##### deim_elem_assembly { #skrom.rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim.deim_elem_assembly }

```python
rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim.deim_elem_assembly(
    **kwargs,
)
```

Assemble sparse matrix over hyperreduced element set.

**TL;DR**: Performs efficient sparse assembly by extracting element 
matrices only from selected elements and building the global sparse 
matrix using optimized COO format construction.

This method handles the computationally intensive element-level assembly 
phase of hyperreduction:

1. **Element Matrix Extraction**: Calls `extract_element_matrices_rom()` 
   to compute local stiffness matrices for selected elements only, 
   avoiding expensive integration over the entire domain.

2. **Sparse Data Preparation**: Flattens the element matrices and 
   corresponding row/column indices into triplet format (I, J, V) 
   suitable for sparse matrix construction.

3. **Zero Filtering**: Optionally removes zero entries to minimize 
   memory usage and improve sparse matrix performance.

4. **COO Construction**: Builds the sparse matrix using coordinate (COO) 
   format and converts to compressed sparse row (CSR) for efficient 
   subsequent operations.

The assembly process preserves the mathematical structure of the full-order 
operator while dramatically reducing computational cost by focusing only 
on elements containing DEIM-selected degrees of freedom.

###### Parameters {.doc-section .doc-section-parameters}

| Name     | Type   | Description                                                                                                            | Default   |
|----------|--------|------------------------------------------------------------------------------------------------------------------------|-----------|
| **kwargs | dict   | Additional keyword arguments passed to `extract_element_matrices_rom` for controlling element-level assembly behavior. | `{}`      |

###### Returns {.doc-section .doc-section-returns}

| Name   | Type                                              | Description                                                                                                                                                                                        |
|--------|---------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| K      | scipy.sparse.csr_matrix of shape (n_dofs, n_dofs) | Sparse global stiffness matrix assembled over the hyperreduced  element set. Only selected elements contribute to this matrix, making it much cheaper to construct than the full-order equivalent. |

##### extract_element_matrices_rom { #skrom.rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim.extract_element_matrices_rom }

```python
rom.deim.bilinear_form_hyperrom_deim.BilinearFormHYPERROM_deim.extract_element_matrices_rom(
    ubasis,
    vbasis=None,
    elem_indices=None,
    **kwargs,
)
```

Extract element matrices for hyperreduced mesh assembly.

**TL;DR**: Computes local element stiffness matrices for the reduced 
element set using either serial or parallel execution, providing the 
fundamental building blocks for sparse global assembly.

This method performs the core finite element integration to compute 
element-level contributions to the global bilinear form. The integration 
is performed only over elements selected by the hyperreduction strategy, 
dramatically reducing computational cost.

The method supports both serial and parallel execution modes:
- **Serial Mode** (nthreads=0): Sequential element-by-element computation
- **Parallel Mode** (nthreads>0): Multi-threaded parallel element processing

For each element, the method evaluates the bilinear form:
K_e[i,j] = ∫_Ω_e φ_i(x) * form * φ_j(x) dx

where φ_i, φ_j are basis functions and the integration is performed using 
the quadrature rules embedded in the finite element basis.

###### Parameters {.doc-section .doc-section-parameters}

| Name         | Type              | Description                                                                                                                      | Default    |
|--------------|-------------------|----------------------------------------------------------------------------------------------------------------------------------|------------|
| ubasis       | Basis             | Finite element basis for trial functions containing mesh connectivity, quadrature points, and basis function evaluations.        | _required_ |
| vbasis       | Basis             | Finite element basis for test functions. If None, defaults to ubasis  for standard Galerkin formulations.                        | `None`     |
| elem_indices | array_like of int | Specific element indices to include in the extraction. If None, processes all elements in the hyperreduced mesh.                 | `None`     |
| **kwargs     | dict              | Additional keyword arguments passed to the bilinear form evaluation, such as material parameters or other problem-specific data. | `{}`       |

###### Returns {.doc-section .doc-section-returns}

| Name             | Type                                                      | Description                                                                                                                                   |
|------------------|-----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|
| element_matrices | ndarray of shape (n_elements, n_local_dofs, n_local_dofs) | Array of local element stiffness matrices. Each element_matrices[e]  contains the n_local_dofs × n_local_dofs stiffness matrix for element e. |

###### Raises {.doc-section .doc-section-raises}

| Name   | Type       | Description                                                                                                    |
|--------|------------|----------------------------------------------------------------------------------------------------------------|
|        | ValueError | If trial and test bases have incompatible quadrature point counts, indicating a mismatch in integration rules. |